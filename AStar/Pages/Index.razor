@page "/"

@using AStar.World;
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Text;
@using Pathing;
@using System.Diagnostics.CodeAnalysis;
@using Blazorise
@inject IJSRuntime JsRuntime;


<Alert Color="Color.Success" Visible="@GoalReached">
    <AlertMessage>Goal reached!</AlertMessage>
    <AlertDescription>The goal has been reached in @_moveCount moves! Total path cost: @_pathing?.CurrentState.Next?.PathCost</AlertDescription>
</Alert>

<div class="container ms-0">
    <div class="row">
        <div class="col-auto ps-0" @onclick="OnTileClicked" @onmousemove="OnTileHovered">
            <BECanvas Width="@(MAP_WIDTH * TILE_SIZE)" Height="@(MAP_HEIGHT * TILE_SIZE)" @ref="_canvasReference"></BECanvas>
        </div>

        <div class="overflow-auto col border-start" style="max-height: @(MAP_HEIGHT * TILE_SIZE)px">
            @{ int i = 0; }
            @foreach (var queueItem in Queue)
            {
                @if (i == 0)
                {
                    <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.AngleDoubleRight" style="color: orange;"></Icon>
                    <label></label>
                }
                <span @onmouseenter="() => OnQueueItemEnter(queueItem.Data.X, queueItem.Data.Y)" @onmouseleave="() => OnQueueItemLeave(queueItem.Data.X, queueItem.Data.Y)">
                    <label>(@queueItem.Data.X, @queueItem.Data.Y) f: @queueItem.TotalCost</label>

                    @if(SelectedAlgorithm == Algorithms.AStar)
                    {
                        <small>&nbsp;&nbsp;<i>g: @queueItem.PathCost + h: @queueItem.HeuristicCost</i></small>
                    }
                    else if(SelectedAlgorithm == Algorithms.GBFS)
                    {
                        <small>&nbsp;&nbsp;<i>h: @queueItem.HeuristicCost</i></small>
                    }
                </span>
                <br />
                i++;
            }
        </div>
    </div>


    
    <div class="row">
        <div class="col-auto">
            <div class="row">
                <textarea readonly rows="6">@TileInformation</textarea>
            </div>
            <div class="row">
                <label class="p-0">Status: @Status</label>
            </div>
        </div>
        <div class="col">
            <div class="row">
                <div class="col">
                    <button class="btn btn-outline-danger" @onclick="OnResetClicked" disabled="@Running">Reset</button>
                    <button class="btn btn-outline-success" @onclick="OnSetStartClicked" disabled="@(Solving || GoalReached)">Set Start</button>
                    <button class="btn btn-outline-info" @onclick="OnSetGoalClicked" disabled="@(Solving || GoalReached)">Set Goal</button>
                </div>
            </div>
            <div class="row mt-1">
                <div class="col-auto pe-0">
                    <select class="form-select" disabled="@(Solving || GoalReached)" @bind="SelectedAlgorithm">
                        @foreach (var alg in _availableAlgorithms)
                        {
                            <option value="@alg.Value">@alg.Key</option>
                        }
                    </select>
                </div>
                <div class="col-auto">
                    <button class="btn btn-outline-danger" @onclick="OnClearPathClicked" disabled="@Running">Clear Path</button>
                    <button class="btn btn-outline-primary" @onclick="OnRunClicked" disabled="@GoalReached">Run</button>
                    <button class="btn btn-outline-secondary" @onclick="OnStepClicked" disabled="@(Running || GoalReached)">Step</button>
                </div>
                <div class="col-auto">
                    <label class="form-label mb-0">Run Delay:</label>
                </div>
                <div class="col-auto ps-0">
                    <input class="form-control w-50" type="number" disabled="@(Running || GoalReached)" @bind="RunDelay" />
                </div>
            </div>
            <div class="row mt-1">
                <div class="col-auto">
                    <label class="form-label">Horizontal movement cost:</label>
                </div>
                <div class="col-auto">
                    <input class="form-control" type="number" disabled="@(Solving || GoalReached)" @bind="HorizontalCost" />
                </div>
            </div>
            <div class="row mt-1">
                <div class="col-auto">
                    <label class="form-label">Vertical movement cost:&nbsp;&nbsp;&nbsp;&nbsp;</label>
                </div>
                <div class="col-auto">
                    <input class="form-control" type="number" disabled="@(Solving || GoalReached)" @bind="VerticalCost" />
                </div>
            </div>
        </div>
    </div>
</div>

@*<div class="row">
    <div class="col">
        <label>Heuristic Function</label>
        <br />
        <textarea rows="10" @bind="@JSHeuristicFunction"></textarea>
    </div>
</div>*@

@code {
    private const int TILE_SIZE = 24;
    private const int MAP_WIDTH = 30;
    private const int MAP_HEIGHT = 20;

    private const string STYLE_START = "green";
    private const string STYLE_GOAL = "cornflowerblue";

    private const string STYLE_PASSABLE = "ghostwhite";
    private const string STYLE_WALL = "black";

    private const string STYLE_FRONTIER = "yellow";
    private const string STYLE_NEXT = "orange";
    private const string STYLE_EXPANDED = "darkgoldenrod";

    private const string STYLE_HOVERED = "skyblue";


    private bool _settingStart;
    private bool _settingGoal;


    public string TileInformation { get; set; } = "";
    public List<TreeNode<Tile>> Queue { get; set; } = new List<TreeNode<Tile>>();
    public string Status { get; set; } = "";
    public bool GoalReached 
    {
        get => _pathing != null && _pathing.GoalReached;
        set { }
    }
    public bool Solving { get; set; } = false;
    public bool Running { get; set; } = false;
    public int RunDelay { get; set; } = 250;
    public int HorizontalCost { get; set; } = 4;
    public int VerticalCost { get; set; } = 3;
    public string JSHeuristicFunction { get; set; } =
    """"
    Math.abs(refTile.X - goalTile.X) + Math.abs(refTile.Y - goalTile.Y);
    """";
    public Algorithms SelectedAlgorithm { get; set; } = Algorithms.AStar;

    private int _moveCount;


    private Canvas2DContext _context;
    protected BECanvasComponent _canvasReference;

    private World.Map _map;

    private (int x, int y) _start = (-1, -1);
    private (int x, int y) _goal = (-1, -1);

    // This is just for populating the select box with options.
    private Dictionary<string, Algorithms> _availableAlgorithms = new Dictionary<string, Algorithms>
    {
        { "A*", Algorithms.AStar },
        { "GBFS", Algorithms.GBFS }
    };
    private Pathing.PathAlgorithm<World.Tile>? _pathing;

    private StringBuilder _informationBuilder = new StringBuilder();

    private void OnClearPathClicked()
    {
        Queue.Clear();
        Status = "";
        _moveCount = 0;


        for (int x = 0; x < _map.Width; x++)
        {
            for (int y = 0; y < _map.Height; y++)
            {
                _map.GetTileAt(x, y).OnFrontier = false;
                _map.GetTileAt(x, y).IsExpanded = false;
                _map.GetTileAt(x, y).IsNext = false;
                _map.GetTileAt(x, y).TotalCost = 0;
                _map.GetTileAt(x, y).HeuristicCost = 0;
                _map.GetTileAt(x, y).DirtyRender = true;
            }
        }

        _pathing = null;
        Solving = false;
    }

    private async Task OnRunClicked()
    {
        if(Running)
        {
            Running = false;
            return;
        }

        Running = true;
        Solving = true;
        RecreateAStar();

        while (_pathing != null && !_pathing.GoalReached && Running)
        {
            StepAStar();
            StateHasChanged();
            await Task.Delay(RunDelay);
        }

        Running = false;

        if(_pathing == null || _pathing.GoalReached)
        {
            Solving = false;
        }
    }

    private void OnStepClicked()
    {
        Solving = true;
        RecreateAStar();
        StepAStar();
    }

    private void RecreateAStar()
    {
        if(_pathing == null && _start.x != -1 && _start.y != -1 && _goal.x != -1 && _goal.y != -1)
        {
            string source = JSHeuristicFunction;
            HeuristicFunction<Tile> heuristic = new HeuristicFunction<Tile>((r, g) =>
            {
                var jsInProc = (IJSInProcessRuntime)JsRuntime;
                var result = jsInProc.Invoke<dynamic>("runHeuristic", source, r, g, _map);

                Console.WriteLine(result);

                return 0;
                //return result;
            });
            _pathing = SelectedAlgorithm.CreatePathing(_map.Heuristic, t => _map.ExpandTile(t, HorizontalCost, VerticalCost), _map.GetTileAt(_start.x, _start.y), _map.GetTileAt(_goal.x, _goal.y));
        }
    }

    private void StepAStar()
    {
        if(_pathing == null || _pathing.GoalReached)
        {
            return;
        }

        // Clear UI state from previous step
        var nextTile = _pathing.CurrentState.Next;
        if(nextTile != null)
        {
            _map.GetTileAt(nextTile.Data.X, nextTile.Data.Y).IsNext = false;
            _map.GetTileAt(nextTile.Data.X, nextTile.Data.Y).DirtyRender = true;
        }

        foreach (var frontierItem in _pathing.CurrentState.PriorityQueue.UnorderedItems)
        {
            var tile = frontierItem.Element.Data;
            _map.GetTileAt(tile.X, tile.Y).OnFrontier = false;
            _map.GetTileAt(tile.X, tile.Y).DirtyRender = true;
        }

        foreach (var expandedItem in _pathing.CurrentState.Expanded)
        {
            var tile = expandedItem.Data;
            _map.GetTileAt(tile.X, tile.Y).IsExpanded = false;
            _map.GetTileAt(tile.X, tile.Y).DirtyRender = true;
        }

        // Step
        _pathing.Step();

        // Set UI state from latest step

        Queue.Clear();
        foreach (var frontierItem in _pathing.CurrentState.PriorityQueue.UnorderedItems.OrderBy(n => n.Priority))
        {
            var tile = frontierItem.Element.Data;
            _map.GetTileAt(tile.X, tile.Y).OnFrontier = true;
            _map.GetTileAt(tile.X, tile.Y).DirtyRender = true;

            Queue.Add(frontierItem.Element);
        }

        nextTile = _pathing.CurrentState.Next;
        if(nextTile != null)
        {
            _map.GetTileAt(nextTile.Data.X, nextTile.Data.Y).IsNext = true;
            _map.GetTileAt(nextTile.Data.X, nextTile.Data.Y).DirtyRender = true;
            Queue.Insert(0, nextTile);
        }


        foreach (var expandedItem in _pathing.CurrentState.Expanded)
        {
            var tile = expandedItem.Data;
            _map.GetTileAt(tile.X, tile.Y).IsExpanded = true;
            _map.GetTileAt(tile.X, tile.Y).DirtyRender = true;
        }


        foreach(var node in _pathing.SearchTree.Nodes)
        {
            _map.GetTileAt(node.Data.X, node.Data.Y).HeuristicCost = node.HeuristicCost;
            _map.GetTileAt(node.Data.X, node.Data.Y).TotalCost = node.TotalCost;
        }

        _moveCount++;
        if(_pathing.GoalReached)
        {
            Status = $"Goal found in {_moveCount} moves! Total path cost: {_pathing?.CurrentState.Next?.PathCost ?? -1}";
        }
        else
        {
            Status = $"{_moveCount} moves";
        }
    }

    private void OnResetClicked()
    {
        _start = (-1, -1);
        _goal = (-1, -1);
        TileInformation = "";
        Queue.Clear();
        Status = "";
        _moveCount = 0;


        for (int x = 0; x < _map.Width; x++)
        {
            for (int y = 0; y < _map.Height; y++)
            {
                _map.GetTileAt(x, y).OnFrontier = false;
                _map.GetTileAt(x, y).IsExpanded = false;
                _map.GetTileAt(x, y).IsNext = false;
                _map.GetTileAt(x, y).TotalCost = 0;
                _map.GetTileAt(x, y).HeuristicCost = 0;
                _map.GetTileAt(x, y).Passable = true;
                _map.GetTileAt(x, y).DirtyRender = true;
            }
        }

        _pathing = null;
        Solving = false;
    }

    private void OnSetStartClicked()
    {
        _settingStart = !_settingStart;
    }

    private void OnSetGoalClicked()
    {
        _settingGoal = !_settingGoal;
    }

    private void OnTileClicked(MouseEventArgs e)
    {
        if (Solving)
        {
            return;
        }

        int x = (int)(e.OffsetX / TILE_SIZE);
        int y = (int)(e.OffsetY / TILE_SIZE);


        if(x < 0 || x > MAP_WIDTH || y < 0 || y > MAP_HEIGHT)
        {
            return;
        }

        if(_settingStart)
        {
            if(_start != (-1, -1))
            {
                _map.GetTileAt(_start.x, _start.y).DirtyRender = true;
            }
            _start = (x, y);
            _settingStart = false;
        }
        else if(_settingGoal)
        {
            if (_goal != (-1, -1))
            {
                _map.GetTileAt(_goal.x, _goal.y).DirtyRender = true;
            }
            _goal = (x, y);
            _settingGoal = false;
        }
        else
        {
            _map.GetTileAt(x, y).Passable = !_map.GetTileAt(x, y).Passable;
        }
        _map.GetTileAt(x, y).DirtyRender = true;

        _pathing = null;
    }

    private void OnTileHovered(MouseEventArgs e)
    {
        int x = (int)(e.OffsetX / TILE_SIZE);
        int y = (int)(e.OffsetY / TILE_SIZE);

        if(x < 0 || x >= MAP_WIDTH || y < 0 || y >= MAP_HEIGHT)
        {
            return;
        }


        var tile = _map.GetTileAt(x, y);
        _informationBuilder.Clear();
        _informationBuilder.AppendLine($"Tile @ ({x}, {y})");
        _informationBuilder.AppendLine($"Cost (f(n)): {tile.TotalCost}");
        _informationBuilder.AppendLine($"Heuristic (h(n)): {tile.HeuristicCost}");


        if (tile.IsNext)
        {
            _informationBuilder.AppendLine($"Up next");
        }
        else if (tile.IsExpanded)
        {
            _informationBuilder.AppendLine($"Expanded");
        }
        else if (tile.OnFrontier)
        {
            _informationBuilder.AppendLine($"On frontier");
        }

        TileInformation = _informationBuilder.ToString();
    }

    private void OnQueueItemEnter(int tileX, int tileY)
    {
        if (tileX < 0 || tileX >= MAP_WIDTH || tileY < 0 || tileY >= MAP_HEIGHT)
        {
            return;
        }

        _map.GetTileAt(tileX, tileY).IsHovered = true;
        _map.GetTileAt(tileX, tileY).DirtyRender = true;
        var args = new MouseEventArgs()
        {
            OffsetX = tileX * TILE_SIZE,
            OffsetY = tileY * TILE_SIZE
        };
        OnTileHovered(args);
    }

    private void OnQueueItemLeave(int tileX, int tileY)
    {
        if (tileX < 0 || tileX >= MAP_WIDTH || tileY < 0 || tileY >= MAP_HEIGHT)
        {
            return;
        }

        _map.GetTileAt(tileX, tileY).IsHovered = false;
        _map.GetTileAt(tileX, tileY).DirtyRender = true;
    }

    protected override void OnInitialized()
    {
        _map = new World.Map(MAP_WIDTH, MAP_HEIGHT);
        OnResetClicked();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            this._context = await this._canvasReference.CreateCanvas2DAsync();
        }
        await Draw();
    }

    private async Task Draw()
    {
        await this._context.SetStrokeStyleAsync("silver");
        for (int x = 0; x < _map.Width; x++)
        {
            for (int y = 0; y < _map.Height; y++)
            {
                var tile = _map.GetTileAt(x, y);
                if(!tile.DirtyRender)
                {
                    continue;
                }
                _map.GetTileAt(x, y).DirtyRender = false;

                if(tile.Passable)
                {
                    if (_start.x == x && _start.y == y)
                    {
                        await this._context.SetFillStyleAsync(STYLE_START);
                    }
                    else if (_goal.x == x && _goal.y == y)
                    {
                        await this._context.SetFillStyleAsync(STYLE_GOAL);
                    }
                    else if(tile.IsHovered)
                    {
                        await this._context.SetFillStyleAsync(STYLE_HOVERED);
                    }
                    else if (tile.IsExpanded)
                    {
                        await this._context.SetFillStyleAsync(STYLE_EXPANDED);
                    }
                    else if (tile.IsNext)
                    {
                        await this._context.SetFillStyleAsync(STYLE_NEXT);
                    }
                    else if (tile.OnFrontier)
                    {
                        await this._context.SetFillStyleAsync(STYLE_FRONTIER);
                    }
                    else
                    {
                        await this._context.SetFillStyleAsync(STYLE_PASSABLE);
                    }
                }
                else
                {
                    await this._context.SetFillStyleAsync(STYLE_WALL);
                }


                await this._context.FillRectAsync(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);

                await this._context.StrokeRectAsync(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
            }
        }
    }
}